version: '3'

tasks:
  install:
    desc: Install dependencies
    cmds:
      - pnpm install

  dev:
    desc: Start development server
    cmds:
      - pnpm run dev
    sources:
      - src/**/*
      - examples/**/*
      - playground/**/*
      - package.json
    generates:
      - dist/

  build:
    desc: Build for production
    cmds:
      - pnpm run build
    sources:
      - src/**/*
      - package.json
    generates:
      - dist/

  preview:
    desc: Preview production build
    cmds:
      - pnpm run preview
    deps: [build]

  lint:
    desc: Run ESLint
    cmds:
      - pnpm run lint

  lint:fix:
    desc: Fix ESLint issues
    cmds:
      - pnpm run lint --fix

  format:
    desc: Format code with Prettier
    cmds:
      - pnpm run format

  test:
    desc: Run tests
    cmds:
      - pnpm test

  test:watch:
    desc: Run tests in watch mode
    cmds:
      - pnpm test --watch

  test:once:
    desc: Run tests once and exit (no watch mode)
    cmds:
      - npx vitest run --reporter=basic

  lint:once:
    desc: Run linting once and exit (no watch mode)
    cmds:
      - pnpm lint

  check:once:
    desc: Run all checks once and exit (lint + test)
    cmds:
      - echo "🔧 [DEBUG] Running lint check..."
      - pnpm lint
      - echo "🔧 [DEBUG] Running tests..."
      - npx vitest run --reporter=basic
      - echo "✅ All checks completed!"

  clean:
    desc: Clean build artifacts
    cmds:
      - |
        if [ "$OS" = "Windows_NT" ] || [ "$OSTYPE" = "msys" ] || [ "$OSTYPE" = "cygwin" ]; then
          echo "🔧 [DEBUG] Windows detected - using PowerShell commands"
          if command -v Remove-Item >/dev/null 2>&1; then
            Remove-Item -Recurse -Force dist/ -ErrorAction SilentlyContinue
            Remove-Item -Recurse -Force node_modules/ -ErrorAction SilentlyContinue
            Remove-Item -Recurse -Force .vite/ -ErrorAction SilentlyContinue
            Remove-Item -Recurse -Force docs/.vitepress/cache/ -ErrorAction SilentlyContinue
          else
            rmdir /s /q dist 2>nul || echo "dist/ not found"
            rmdir /s /q node_modules 2>nul || echo "node_modules/ not found"
            rmdir /s /q .vite 2>nul || echo ".vite/ not found"
            rmdir /s /q docs\.vitepress\cache 2>nul || echo "docs/.vitepress/cache/ not found"
          fi
        else
          echo "🔧 [DEBUG] Unix/Linux detected - using rm commands"
          rm -rf dist/
          rm -rf node_modules/
          rm -rf .vite/
          rm -rf docs/.vitepress/cache/
        fi

  docs:dev:
    desc: Start documentation development server
    cmds:
      - pnpm run docs:dev

  docs:build:
    desc: Build documentation
    cmds:
      - pnpm run docs:build

  docs:preview:
    desc: Preview documentation build
    cmds:
      - pnpm run docs:preview

  setup:
    desc: Initial project setup
    cmds:
      - pnpm install
      - pnpm add -D @types/node

  gitpod:setup:
    desc: Setup for Gitpod environment
    cmds:
      - echo "🚀 Setting up Gitpod environment..."
      - pnpm install --frozen-lockfile
      - echo "✅ Dependencies installed"
      - pnpm run dev --host 0.0.0.0

  gitpod:dev:
    desc: Start Gitpod development server
    cmds:
      - echo "🚀 Starting Vite server for Gitpod..."
      - pnpm run dev --host 0.0.0.0 --port 5173

  gitpod:prebuild:
    desc: Prebuild setup for faster Gitpod launches
    cmds:
      - echo "🔄 Running prebuild setup..."
      - pnpm install --frozen-lockfile
      - pnpm run build
      - echo "✅ Prebuild complete!"

  gitpod:validate:
    desc: Validate Gitpod configuration and readiness
    cmds:
      - bash scripts/validate-gitpod.sh

  # Development workflow tasks
  start:
    desc: Start development environment (install + dev)
    deps: [install]
    cmds:
      - pnpm run dev

  check:
    desc: Run all checks (lint + test)
    deps: [lint, test]

  full-build:
    desc: Full build process (lint + test + build)
    deps: [lint, test, build]

  # Utility tasks
  update-deps:
    desc: Update dependencies
    cmds:
      - pnpm update

  audit:
    desc: Audit dependencies
    cmds:
      - pnpm audit

  type-check:
    desc: Run TypeScript type checking
    cmds:
      - pnpm tsc --noEmit

  # Examples
  examples:dev:
    desc: Start examples development server
    cmds:
      - cd examples && pnpm run dev

  playground:dev:
    desc: Start playground development server
    cmds:
      - cd playground && pnpm run dev

  # Docker tasks
  docker:start:
    desc: Start Docker development environment
    cmds:
      - echo "🚀 Starting Docker development environment..."
      - docker-compose up -d
      - echo "✅ Development server should be available at http://localhost:5173"
      - echo "💡 Use 'task docker:logs' to view logs or 'task docker:stop' to stop"
    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1

  docker:stop:
    desc: Stop Docker development environment
    cmds:
      - echo "⏹️ Stopping Docker development environment..."
      - docker-compose down
      - echo "✅ Docker environment stopped"

  docker:restart:
    desc: Restart Docker development environment
    cmds:
      - echo "🔄 Restarting Docker development environment..."
      - docker-compose restart
      - echo "✅ Docker environment restarted"

  docker:rebuild:
    desc: Rebuild and restart Docker containers
    cmds:
      - echo "🔨 Rebuilding Docker containers..."
      - docker-compose down
      - docker-compose build --no-cache
      - docker-compose up -d
      - echo "✅ Docker rebuild complete!"
    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1

  docker:logs:
    desc: Show Docker container logs
    cmds:
      - echo "📋 Showing Docker logs (Press Ctrl+C to exit)..."
      - docker-compose logs -f

  docker:shell:
    desc: Open shell in Docker container
    cmds:
      - echo "🐚 Opening shell in Docker container..."
      - docker-compose exec vite sh

  docker:clean:
    desc: Clean Docker resources and rebuild
    cmds:
      - echo "🧹 Cleaning Docker resources..."
      - docker-compose down -v
      - docker system prune -f
      - docker-compose build
      - echo "✅ Docker cleanup complete!"
    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1

  docker:build:
    desc: Build Docker containers only
    cmds:
      - echo "🔨 Building Docker containers..."
      - docker-compose build
      - echo "✅ Docker build complete!"
    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1

  # Debug tasks
  debug:os:
    desc: Detect operating system and show system info
    cmds:
      - echo "🔧 [DEBUG] Operating System Detection:"
      - |
        if [ "$OS" = "Windows_NT" ] || [ "$OSTYPE" = "msys" ] || [ "$OSTYPE" = "cygwin" ]; then
          echo "  Platform: Windows"
          echo "  OS: $OS"
          echo "  OSTYPE: $OSTYPE"
          if command -v uname >/dev/null 2>&1; then
            echo "  Kernel: $(uname -s)"
            echo "  Architecture: $(uname -m)"
          fi
        else
          echo "  Platform: Unix/Linux"
          echo "  OS: $OS"
          echo "  OSTYPE: $OSTYPE"
          if command -v uname >/dev/null 2>&1; then
            echo "  Kernel: $(uname -s)"
            echo "  Architecture: $(uname -m)"
            echo "  Distribution: $(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2 2>/dev/null || echo 'Unknown')"
          fi
        fi

  debug:env:
    desc: Debug environment and configuration
    cmds:
      - echo "🔧 [DEBUG] Environment Information:"
      - node --version
      - pnpm --version
      - pwd
      - echo "Gitpod workspace URL available"
      - |
        if [ "$OS" = "Windows_NT" ] || [ "$OSTYPE" = "msys" ] || [ "$OSTYPE" = "cygwin" ]; then
          echo "🔧 [DEBUG] Windows detected"
          if command -v Test-Path >/dev/null 2>&1; then
            Test-Path package.json
            Test-Path Taskfile.yml
          else
            echo "package.json exists: $([ -f package.json ] && echo 'Yes' || echo 'No')"
            echo "Taskfile.yml exists: $([ -f Taskfile.yml ] && echo 'Yes' || echo 'No')"
          fi
        else
          echo "🔧 [DEBUG] Unix/Linux detected"
          ls -la package.json 2>/dev/null || echo "package.json not found"
          ls -la Taskfile.yml 2>/dev/null || echo "Taskfile.yml not found"
        fi

  debug:test:
    desc: Debug test configuration
    cmds:
      - echo "🔧 [DEBUG] Test Configuration:"
      - |
        if [ "$OS" = "Windows_NT" ] || [ "$OSTYPE" = "msys" ] || [ "$OSTYPE" = "cygwin" ]; then
          if command -v Test-Path >/dev/null 2>&1; then
            Test-Path vitest.config.ts
          else
            echo "vitest.config.ts exists: $([ -f vitest.config.ts ] && echo 'Yes' || echo 'No')"
          fi
        else
          ls -la vitest.config.ts 2>/dev/null || echo "vitest.config.ts not found"
        fi
      - echo "Running test with debug output..."
      - npx vitest run --reporter=verbose

  debug:lint:
    desc: Debug linting configuration
    cmds:
      - echo "🔧 [DEBUG] Lint Configuration:"
      - |
        if [ "$OS" = "Windows_NT" ] || [ "$OSTYPE" = "msys" ] || [ "$OSTYPE" = "cygwin" ]; then
          if command -v Test-Path >/dev/null 2>&1; then
            Test-Path eslint.config.js
            Test-Path tsconfig.json
          else
            echo "eslint.config.js exists: $([ -f eslint.config.js ] && echo 'Yes' || echo 'No')"
            echo "tsconfig.json exists: $([ -f tsconfig.json ] && echo 'Yes' || echo 'No')"
          fi
        else
          ls -la eslint.config.js 2>/dev/null || echo "eslint.config.js not found"
          ls -la tsconfig.json 2>/dev/null || echo "tsconfig.json not found"
        fi
      - echo "Running lint with debug output..."
      - pnpm lint
